{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#introduction","title":"Introduction","text":"<p>ExRam.Gremlinq is a .NET object-graph-mapper (OGM) for Apache TinkerPop\u2122 enabled databases. An OGM on the .NET platform is for the realm of graph-databases what,  among others, Entity Framework or NHibernate (generally called object-relational-mappers, or ORMs) are for relational databases.</p> <p>TinkerPop-enabled graph databases are queried by a graph query language called Gremlin. ExRam.Gremlinq enables .NET developers to create and issue this kind of queries in a strongly-typed fashion by using the powerful Gremlinq-DSL abstraction over their own model of domain entity classes (usually called POCOs). It will serialize the query to valid Gremlin for execution on the server and deserialize the results to the correct .NET types.</p>"},{"location":"#features","title":"Features","text":"Type safety <p>ExRam.Gremlinq queries carry and pass on full information about the query result type and its role (vertex, edge, scalar etc.). This minimizes the possibility of writing and executing invalid queries, speeding up development.</p> Example <p>For a simple example, let's assume the domain of a simple pet-shop with classes <code>Cat</code> and <code>Dog</code> that both inherit from an abstract base class <code>Animal</code>. A plain Gremlin-query asking for all Cats in the database named 'Poppy' would look like this:</p> Groovy<pre><code>g.V().hasLabel('Cat').has('Name', 'Poppy')\n</code></pre> <p>ExRam.Gremlinq allows for issuing this query using type-safe C# language constructs over the <code>Cat</code>-class:</p> C#<pre><code>var cats = _g.V&lt;Cat&gt;().Where(cat =&gt; cat.Name == \"Poppy\").ToArrayAsync()\n</code></pre> <p>At every step in the query, ExRam.Gremlinq is aware that it is dealing with vertices of type  <code>Cat</code> and, upon retrieval of results from the server, deseriailze these into instances of type <code>Cat</code>.</p> Inheritance <p>ExRam.Gremlinq supports type hierarchies of vertex- and edge-types and is able to determine the set of valid element-label to use in the transformed query executed on the server.</p> Example <p>Assuming the above domain, a query for alll vertices of type <code>Animal</code> will, under the hood,  query for the <code>Cat</code> resp. <code>Dog</code> labels and return correct instances of either types when the query  returns, i.e.</p> C#<pre><code>var animals = _g.V&lt;Animal&gt;().ToArrayAsync()\n</code></pre> <p>will query for vertices labelled either <code>Cat</code> or <code>Dog</code> and deserialize accordingly.</p> Powerful DSL <p>The type system of ExRam.Gremlinq itself, represented as various fluent interfaces that carry result type information, enables developers to rapidly write correct queries.</p> Example <p>Again assuming the above domain, enriched with <code>SoldTo</code> and <code>Customer</code> classes that represent edges labelled <code>SoldTo</code> pointing from <code>Animals</code> to <code>Customers</code>, we can query for the customer that bought a cat named 'Poppy':</p> C#<pre><code>var cat = g.V&lt;Cat&gt;().Where(cat =&gt; cat.Name == \"Poppy\").Out&lt;SoldTo&gt;().OfType&lt;Customer&gt;().FirstOfDefaultAsync()\n</code></pre> <p>The ExRam.Gremlinq DSL will only allow fluently using the <code>Out&lt;...&gt;</code> method if it knows that it's currently on a vertex. This avoids accidentally trying to walk edges from e.g. edges or scalar values. The Gremlin language by itself does not prohibit writing such queries, so that bugs could only be detected during integration tests or, even worse, in production.</p> Expression-parsing <p>ExRam.Gremlinq is capable of recognizing a wide range of C#-expressions and generate valid Gremlin. This enables developers to focus on the business logic in the language they're comfortable with, instead of dealing directly with the Gremlin query language.</p> Example <p>For example, querying for all the Cats whose name starts with the letter \"B\", the query</p> C#<pre><code>var cats = await _g.V&lt;Cat&gt;().Where(x =&gt; x.Name.Value.StartsWith(\"B\")).ToArrayAsync();\n</code></pre> <p>will correctly be translated into proper Gremlin syntax for execution on the server.</p> Customization <p>ExRam.Gremlinq is extremely customizable, from query serialization to query execution to result  deserialization. It allows custom scalar types to be registered for correct (de-)serialization to/from native graph types, and query execution to be intercepted.</p>"},{"location":"#provider-support","title":"Provider support","text":"<p>ExRam.Gremlinq comes with out-of-the-box support for</p> <ul> <li>AWS Neptune</li> <li>Azure Cosmos Db</li> <li>JanusGraph</li> <li>TinkerPop Gremlin Server</li> </ul> <p>Other providers may just work with the generic Gremlin Server-package, be provided by the community or be part of the commercial extension package.</p>"},{"location":"Customization/","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"Customization/#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"Customization/#project-layout","title":"Project layout","text":"Text Only<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"Extensions/","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"Extensions/#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"Extensions/#project-layout","title":"Project layout","text":"Text Only<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"Queries/","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"Queries/#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"Queries/#project-layout","title":"Project layout","text":"Text Only<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"Setup/","title":"From a <code>dotnet new</code> template","text":"<p>Install the Gremlinq templates package:</p> Bash<pre><code>&gt; dotnet new install ExRam.Gremlinq.Templates\n</code></pre> <p>There are two <code>dotnet new</code> templates included in the package: one for a simple console app and one that shows how to get things running on Asp.NET Core. Currently, there is out-of-the-box support for the generic Gremlin Server, AWS Neptune, Azure CosmosDb and JanusGraph.</p> <p>Depending on the desired project type and provider, use <code>dotnet new</code> to create a new project:</p> ConsoleASP.NET Core AWS NeptuneAzure CosmosDbJanusGraphGremlin Server Bash<pre><code>dotnet new gremlinq-console --name GettingStartedWithGremlinq --provider Neptune\n</code></pre> Bash<pre><code>dotnet new gremlinq-console --name GettingStartedWithGremlinq --provider CosmosDb\n</code></pre> Bash<pre><code>dotnet new gremlinq-console --name GettingStartedWithGremlinq --provider JanusGraph\n</code></pre> Batchfile<pre><code>dotnet new gremlinq-console --name GettingStartedWithGremlinq --provider GremlinServer\n</code></pre> AWS NeptuneAzure CosmosDbJanusGraphGremlin Server Bash<pre><code>dotnet new gremlinq-aspnet --name GettingStartedWithGremlinq --provider Neptune\n</code></pre> Bash<pre><code>dotnet new gremlinq-aspnet --name GettingStartedWithGremlinq --provider CosmosDb\n</code></pre> Bash<pre><code>dotnet new gremlinq-aspnet --name GettingStartedWithGremlinq --provider JanusGraph\n</code></pre> Bash<pre><code>dotnet new gremlinq-aspnet --name GettingStartedWithGremlinq --provider GremlinServer\n</code></pre>"}]}